#!/usr/bin/env bash
clear
Green=`tput setaf 46`
Red=`tput setaf 196`
reset=`tput sgr0`

banner() {
clear
sleep 0.3
echo "  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁

      |  |
      |/\|
  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
sleep 0.3
clear  
echo "  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁

      |  | |__|
      |/\| |  |
  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
sleep 0.3
clear
echo "  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                 __                  
      |  | |__| /  \                 
      |/\| |  | \__/                 
  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
sleep 0.3
clear
echo "  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                 __                 
      |  | |__| /  \  /\            
      |/\| |  | \__/ /~~\           
  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
sleep 0.3
clear
echo "  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                 __               
      |  | |__| /  \  /\   |\/|   
      |/\| |  | \__/ /~~\  |  |   
  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
sleep 0.3
clear
echo "  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                 __                 
      |  | |__| /  \  /\   |\/| |   
      |/\| |  | \__/ /~~\  |  | |   
  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
"
sleep 0.1
}

state_banner() {
echo "  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                 __
      |  | |__| /  \  /\   |\/| |
      |/\| |  | \__/ /~~\  |  | |
  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
"
}

root_privilege() {

if [ $(id -u) -ne 0 ]; then
	echo "${Red}"
	banner
	echo  -e "${Red}\033[5m    This script must be run as root\033[0m
"
	exit 1
fi
}

process_killer() {

if cat .whoami_pkill.sh &> /dev/null ; then
	echo "${Red}"
	banner
	echo "${Red}  It was detected that the system is already using whoami${reset}"
	echo -n "${Red}  The other process terminating " && sleep 2 
	bash .whoami_pkill.sh &> /dev/null && echo "${Green}successful." 
	echo "${Green}  Whoami ready for rerun." && sleep 2
else
	echo -n "${Green}" && sleep 0.1
fi

}

requirements() {

clear
state_banner
if tor -h &> /dev/null ; then
	sleep 0.1
else echo -n "${Red}  Tor is not installed on your system${reset}" && echo "${Green} installation started."
     if apt-get install tor -y &> /dev/null ; then
	sleep 1
     else echo "${Red}  Tor installation failed update the system's sources.list file and try again." && exit 1
     fi
fi
if mkdir -p /usr/share/whoami/data &> /dev/null && mkdir -p /usr/share/whoami/backups &> /dev/null && install -Dm644 data/* /usr/share/whoami/data &> /dev/null &> /dev/null; then	
   sleep 0.1
else echo "${Red}
  There was a problem creating the Whoami backup folder." && exit 1
fi

}

whoami_start() {

clear
state_banner
echo -n "  Stage : Destroying System Logs

  [▇▇                   ] | %10"
sleep 2
if
	command &&
	for log_killer in `locate *.log`; do
    		echo "shred -vfzu $log_killer"
    		echo "touch $log_killer" 
	done > whoami_log_killer.sh &> /dev/null
	sudo bash whoami_log_killer.sh &> /dev/null  ; then
	sleep 0.1 & pid=$(ps -o ppid= -p "$!") && echo "kill -9 $pid" > .whoami_pkill.sh 
else 
	echo "${Red}
  There was a problem destroying the Whoami System Logs." && sleep 0.1 & pid=$(ps -o ppid= -p "$!") 
echo "kill -9 $pid" > .whoami_pkill.sh  && exit 1
fi
shred -vfzu whoami_log_killer.sh &> /dev/null
echo -e -n "\r     \r" && echo "  [▇▇▇                  ] | %15"
sleep 2
sleep 0.1 & pid=$(ps -o ppid= -p "$!") && echo "kill -9 $pid" > .whoami_pkill.sh  
clear
state_banner
echo -n "  Stage : Assigning a fake HostName

  [▇▇▇▇                 ] | %20"
	oldname=$(cat /etc/hostname)
	oldnames=$(cat /etc/hosts)
	hexchars="ABCDEF789654321"
	end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/I\1/g' )
	body=$( for i in {1..4} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/I\1/g' )
	head=$( for i in {1..2} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/ \1/g' )
	fakeid=($head$body$end)
	echo "127.0.0.1       localhost $fakeid
	::1             localhost ip6-localhost ip6-loopback
	fe00::0         ip6-localnet
	ff00::0         ip6-mcastprefix
	ff02::1         ip6-allnodes
	ff02::2         ip6-allrouters" > /etc/hosts 
	echo "$fakeid" > /etc/hostname
	newname=$(cat /etc/hostname)
	newnames=$(cat /etc/hosts)
	sleep 2
	sleep 0.1 & pid=$(ps -o ppid= -p "$!") && echo "kill -9 $pid" > .whoami_pkill.sh 
	echo "echo "$oldname" > /etc/hostname" >> .whoami_pkill.sh 
	echo "echo "$oldnames" > /etc/hosts" >> .whoami_pkill.sh 
echo -e -n "\r     \r" && echo "  [▇▇▇▇▇▇               ] | %35"
	if  [ $oldname != $newname ] &> /dev/null  ; then
		sleep 1
	else
		echo "${Red}
  There was a problem changing the Whoami HostName."&& exit 1
	fi
clear
state_banner
echo -n "  Stage : Setting DNS

  [▇▇▇▇▇▇▇▇             ] | %40"
sleep 2
	dns_backup=$(grep nameserver /etc/resolv.conf)
	echo "# Generated by Whoami
nameserver 84.200.69.80
nameserver 84.200.70.40
nameserver 91.239.100.100
nameserver 89.233.43.71
nameserver 192.168.1.1" > /etc/resolv.conf
	dns_check=$(grep nameserver /etc/resolv.conf)
	sleep 0.1 & pid=$(ps -o ppid= -p "$!") && echo "kill -9 $pid" > .whoami_pkill.sh 
	echo "echo "$oldname" > /etc/hostname" >> .whoami_pkill.sh 
	echo "echo "$oldnames" > /etc/hosts" >> .whoami_pkill.sh 
	echo "echo "$dns_backup" > /etc/resolv.conf" >> .whoami_pkill.sh 
echo -e -n "\r     \r" && echo  "  [▇▇▇▇▇▇▇▇▇▇           ] | %50"
	if grep Whoami /etc/resolv.conf &>/dev/null ; then
		sleep 0.1
	else
		echo "${Red}
  There was a problem setting the Whoami DNS." && exit 1
	fi
sleep 1
clear
state_banner
echo  "  Stage : Mac Address Change

  [▇▇▇▇▇▇▇▇▇▇▇▇▇        ] | %65"
sleep 1

	mac_channger() {
clear
state_banner
echo  -n "  Stage : Mac Address Change

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇       ] | %70"
				oldmac=$(cat /sys/class/net/$macc/address)
				n=0
				until [ $n -ge 10 ]
				do
				command &&
				RAND_MAC() {

				gen() {
				NUM="$(tr -dc '0-9a-f' </dev/urandom | head -c 2)"
				echo -n "$NUM:"
				}

				for c in {1..6}; do

				if [ "$c" -lt "6" ]; then
					gen
				else
					gen | tr -d ':'
				fi

				done
				}
				n=$[$n+1]
				out=$(RAND_MAC)
				echo $out	
				ifconfig $macc down
				ifconfig $macc hw ether $out
				ifconfig $macc up
				done &> /dev/null
				newmac=$(cat /sys/class/net/$macc/address)
				macok="True"
				echo -e -n "\r     \r" && echo "  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇      ] | %75"
				sleep 0.1 & pid=$(ps -o ppid= -p "$!") && echo "kill -9 $pid" > .whoami_pkill.sh
				echo "echo "$oldname" > /etc/hostname" >> .whoami_pkill.sh 
				echo "echo "$oldnames" > /etc/hosts" >> .whoami_pkill.sh 
				echo "echo "$dns_backup" > /etc/resolv.conf" >> .whoami_pkill.sh 
				echo "ifconfig $macc down " >> .whoami_pkill.sh 
				echo "ifconfig $macc hw ether $oldmac" >> .whoami_pkill.sh 
				echo "ifconfig $macc up" >> .whoami_pkill.sh 
				if [ $oldmac != $newmac ] ; then
					sleep 1
				else
					echo "${Red}
  There was a problem changing the Whoami Mac address." && exit 1
				fi
	}

	if [ "$(dmidecode -s system-manufacturer)" == "innotek GmbH" ] &>/dev/null; then
		echo ""
		echo "${Green}  Virtual Machine detected" && sleep 1
		if nmcli dev | grep wifi &>/dev/null; then
				n=0
				until [ $n -ge 99 ]
				do
				command &&
				echo -n "${Green} * Network interface ➤ " && read macc
				if [ -z $macc ]; then
					echo "${Red}   Empty input !"
				else
					sudo iwconfig $macc &> /dev/null && break
					echo "${Red}   Incorrect input "
				fi
				done
				mac_channger
		else
			nwl="True"
			echo "${Red}  Wireless card not detected so you cannot use this module."  && sleep 1
			echo "${Green}  Whoami continues with the next module." && sleep 3
		fi
	else
			n=0		
			until [ $n -ge 99 ]
			do
			command &&
			echo -n "${Green} * Network interface ➤ " && read macc
			if [ -z $macc ]; then
				echo "${Red}   Empty input"
			else
				sudo ifconfig $macc &> /dev/null && break
				echo "${Red}   Incorrect input"
			fi
			done
			mac_channger

	fi 
clear
state_banner
echo -n "  Stage : Setting the Time zone

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇     ] | %80"
timezonebackup=$(cat /etc/timezone)
echo -e -n "\r     \r" && echo "  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇   ] | %85"
sleep 1
timedatectl set-timezone UTC
sleep 0.1 & pid=$(ps -o ppid= -p "$!") && echo "kill -9 $pid" > .whoami_pkill.sh 
echo "echo "$oldname" > /etc/hostname" >> .whoami_pkill.sh 
echo "echo "$oldnames" > /etc/hosts" >> .whoami_pkill.sh 
echo "echo "$dns_backup" > /etc/resolv.conf" >> .whoami_pkill.sh
if [ $macok == "True" ] &>/dev/null; then
	echo "ifconfig $macc down " >> .whoami_pkill.sh
	echo "ifconfig $macc hw ether $oldmac" >> .whoami_pkill.sh 
	echo "ifconfig $macc up" >> .whoami_pkill.sh 
fi
echo "timedatectl set-timezone $timezonebackup" >> .whoami_pkill.sh 
sleep 2 
clear
state_banner
echo -n "  Stage : IP Hiding

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇  ] | %90"
sleep 2

	readonly config_dir="/usr/share/whoami/data"
	readonly backup_dir="/usr/share/whoami/backups"
	readonly tor_uid="$(id -u debian-tor)"
	readonly trans_port="9040"
	readonly dns_port="5353"
	readonly virtual_address="10.192.0.0/10"
	readonly non_tor="127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

	die() {
	    
	    exit 1
	}

	check_root() {
	    if [[ "$(id -u)" -ne 0 ]]; then
		die 
	    fi
	}

	check_settings() {
	    declare -a dependencies=('tor' 'curl')

	    for package in "${dependencies[@]}"; do
		if ! hash "${package}" 2>/dev/null; then
		    die
		fi
	    done

	    if [ ! -d "$backup_dir" ]; then
		die
	    fi

	    if [ ! -d "$config_dir" ]; then
		die
	    fi

	    if [[ ! -f /etc/tor/torrc ]]; then

		if ! cp -vf "$config_dir/torrc" /etc/tor/torrc &> /dev/null; then
		    die
		fi
	    else
		
		grep -q -x 'VirtualAddrNetworkIPv4 10.192.0.0/10' /etc/tor/torrc
		local string1=$?

		grep -q -x 'AutomapHostsOnResolve 1' /etc/tor/torrc
		local string2=$?

		grep -q -x 'TransPort 9040 IsolateClientAddr IsolateClientProtocol IsolateDestAddr IsolateDestPort' /etc/tor/torrc
		local string3=$?

		grep -q -x 'SocksPort 9050' /etc/tor/torrc
		local string4=$?

		grep -q -x 'DNSPort 5353' /etc/tor/torrc
		local string5=$?

		if [[ "$string1" -ne 0 ]] ||
		   [[ "$string2" -ne 0 ]] ||
		   [[ "$string3" -ne 0 ]] ||
		   [[ "$string4" -ne 0 ]] ||
		   [[ "$string5" -ne 0 ]]; then

		    if ! cp -vf /etc/tor/torrc "$backup_dir/torrc.backup" &> /dev/null; then
		        die
		    fi

		    if ! cp -vf "$config_dir/torrc" /etc/tor/torrc &> /dev/null; then
		        die
		    fi
		fi
	    fi

	    systemctl --system daemon-reload

	}

	setup_iptables() {
	    case "$1" in
		tor_proxy)

		    if ! [[ -f /etc/iptables.rules ]]; then
		        iptables-save > "$backup_dir/iptables.backup"
		    fi

		    iptables -F
		    iptables -X
		    iptables -t nat -F
		    iptables -t nat -X

		    iptables -t nat -A OUTPUT -d $virtual_address -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $trans_port

		    iptables -t nat -A OUTPUT -d 127.0.0.1/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports $dns_port

		    iptables -t nat -A OUTPUT -m owner --uid-owner $tor_uid -j RETURN
		    iptables -t nat -A OUTPUT -o lo -j RETURN

		    for lan in $non_tor; do
		        iptables -t nat -A OUTPUT -d $lan -j RETURN
		    done

		    iptables -t nat -A OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $trans_port

		    iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
		    iptables -A INPUT -i lo -j ACCEPT
		    iptables -A INPUT -j DROP

		    iptables -A FORWARD -j DROP

		    iptables -A OUTPUT -m conntrack --ctstate INVALID -j DROP

		    iptables -A OUTPUT -m state --state INVALID -j DROP
		    iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

		    iptables -A OUTPUT -m owner --uid-owner $tor_uid -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT

		    iptables -A OUTPUT -d 127.0.0.1/32 -o lo -j ACCEPT

		    iptables -A OUTPUT -d 127.0.0.1/32 -p tcp -m tcp --dport $trans_port --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT

		    iptables -A OUTPUT -j DROP

		    iptables -P INPUT DROP
		    iptables -P FORWARD DROP
		    iptables -P OUTPUT DROP

		;;

		default)

		    iptables -F
		    iptables -X
		    iptables -t nat -F
		    iptables -t nat -X
		    iptables -P INPUT ACCEPT
		    iptables -P FORWARD ACCEPT
		    iptables -P OUTPUT ACCEPT

		    if ! [[ -f "${backup_dir}/iptables.backup" ]]; then
		        iptables-restore < "${backup_dir}/iptables.backup"

		    fi
		;;
	    esac
	}
	    check_root
	    check_settings
echo -e -n "\r     \r" && echo -n "  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ] | %95"

	    if systemctl is-active tor.service >/dev/null 2>&1; then
		systemctl stop tor.service
	    fi

	    if ! cp -vf /etc/resolv.conf "$backup_dir/resolv.conf.backup" &> /dev/null ; then
		die 
	    fi

	    printf "%s\\n" "nameserver 127.0.0.1" > /etc/resolv.conf
	    sleep 1

	    sysctl -w net.ipv6.conf.all.disable_ipv6=1 &> /dev/null
	    sysctl -w net.ipv6.conf.default.disable_ipv6=1 &> /dev/null

	    if systemctl start tor.service 2>/dev/null; then
		sleep 1
	    else
		die
	    fi

	    setup_iptables tor_proxy
	    clear
	    state_banner
echo -e -n "\r     \r" && echo "  You are under Whoami tunnel

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇] | %100
"
	    sleep 0.1 & pid=$(ps -o ppid= -p "$!") && echo "kill -9 $pid" > .whoami_pkill.sh 
	    echo "echo "$oldname" > /etc/hostname" >> .whoami_pkill.sh 
	    echo "echo "$oldnames" > /etc/hosts" >> .whoami_pkill.sh 
	    echo "echo "$dns_backup" > /etc/resolv.conf" >> .whoami_pkill.sh 
	    if [ $macok == "True" ] &>/dev/null; then
		echo "ifconfig $macc down " >> .whoami_pkill.sh
		echo "ifconfig $macc hw ether $oldmac" >> .whoami_pkill.sh 
		echo "ifconfig $macc up" >> .whoami_pkill.sh 
	    fi
	    echo "timedatectl set-timezone $timezonebackup" >> .whoami_pkill.sh
	    echo "  Press Ctrl+C for stopping Whoami " 
	    ctrl_c_check="True"

}

whoami_stop () {
sleep 2
clear
state_banner
echo -n "  Stage : Destroying System Logs

  [▇                    ] | %5"
sleep 2
if
	command &&
	for log_killer in `locate *.log`; do
    		echo "shred -vfzu $log_killer"
    		echo "touch $log_killer" 
	done > whoami_log_killer.sh
	sudo bash whoami_log_killer.sh &> /dev/null
	shred -vfzu whoami_log_killer.sh &> /dev/null  ; then
sleep 0.1
else 
	echo "${Red}
  There was a problem destroying the Whoami System Logs." && exit 1
fi
echo -e -n "\r     \r" && echo "  [▇▇▇                  ] | %10"
sleep 2
clear
state_banner
echo -n "  Stage : Restore HostName

  [▇▇▇▇                 ] | %15"

	sleep 1
	echo $oldname > /etc/hostname
	echo $oldnames > /etc/hosts
	lastname=$(cat /etc/hostname)
	if [ $oldname == $lastname ] &> /dev/null ; then
		sleep 1
	else
		echo "
  There was a problem restoring the Whoami HostName." && exit 1
	fi
echo -e -n "\r     \r" && echo -n "  [▇▇▇▇▇▇               ] | %25"
sleep 2
clear
state_banner
echo -n "  Stage : Restore system default DNS

  [▇▇▇▇▇▇▇▇             ] | %40"
sleep 2
	echo $dns_backup > /etc/resolv.conf
echo -e -n "\r     \r" && echo "  [▇▇▇▇▇▇▇▇▇▇           ] | %50"
if [ $nwl == "True" ] &>/dev/null; then
	sleep 0.1
else
		clear
		state_banner
echo -n "  Stage : Restore orginal MAC Address

  [▇▇▇▇▇▇▇▇▇▇▇▇▇        ] | %65"
		sleep 1
		if ifconfig $macc down && ifconfig $macc hw ether $oldmac && ifconfig $macc up &> /dev/null ; then
		smac=$(cat /sys/class/net/$macc/address)
clear
state_banner
echo "  Stage : Restore orginal MAC Address.

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇       ] | %75"
			if [ $oldmac != $smac ] ; then
				sleep 0.1
			else
				echo "
  There was a problem restoring the Whoami MAC Address." && exit 1
			fi
		else
			echo "
  There was a problem restoring the Whoami MAC Address ." && exit 1
		fi
fi

sleep 2
clear
state_banner
echo -n "  Stage : Restore orginal Time zone

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇      ] | %80"

timedatectl set-timezone $timezonebackup
sleep 2
echo -e -n "\r     \r" && echo "  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇     ] | %85"
sleep 1
clear
state_banner
echo -n "  Stage : Disable IP Address Hiding

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇  ] | %90"

	    check_root

	    setup_iptables default

	    systemctl stop tor.service

	    if hash resolvconf 2>/dev/null; then
		resolvconf -u
	    else
		cp -vf "$backup_dir/resolv.conf.backup" /etc/resolv.conf &> /dev/null
	    fi
echo -e -n "\r     \r" && echo "  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ ] | %95"
	    sleep 2
	    sysctl -w net.ipv6.conf.all.disable_ipv6=0 &> /dev/null
	    sysctl -w net.ipv6.conf.default.disable_ipv6=0 &> /dev/null

	    cp -vf "$backup_dir/torrc.backup" /etc/tor/torrc &> /dev/null
	    rm -Rf /usr/share/whoami &> /dev/null && rm -Rf /usr/share/whoami &> /dev/null && rm -Rf /usr/local/bin/whoami &> /dev/null
clear
state_banner
echo "  You are not under whoami tunnel

  [▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇] | %100
"
rm -fr .whoami_pkill.sh &> /dev/null

}
trap ctrl_c INT
function ctrl_c() {

if [ "$ctrl_c_check" != "True" ] ; then
	echo -e -n '\r    \r' && sleep 0.1
else
	echo -e -n '\r    \r' && echo "${Red}  Ctrl+C Detected Whoami stopping"
	whoami_stop
fi
}

root_privilege
process_killer
banner
requirements
whoami_start
sleep 9999d
